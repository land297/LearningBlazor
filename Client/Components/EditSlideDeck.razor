@using Learning.Shared.DbModels
@using Learning.Shared.Models 
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            <MudText Typo="Typo.h6">SlideDeck</MudText>
            <MudTextField @bind-Value="SlideDeck.Title" Label="Title" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="SlideDeck.Description" Label="Description" Variant="Variant.Text" Lines="5"></MudTextField>
            @if (!string.IsNullOrWhiteSpace(SlideDeck.CoverImage)) {
                <div>
                    <img src="@SlideDeck.CoverImage" class="width:100%;" />

                </div>
            }
            <InputFile id="fileInput" OnChange="SetCoverImage" hidden multiple />
            <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Icons.Material.Filled.Image"
                    Label="Cover Image"
                    for="fileInput" />
        </MudPaper>
        <MudPaper Elevation="3" Class="pa-2 mx-2">


            <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Icons.Material.Filled.Add"
                    Label="Add Slide"
                    OnClick="AddSlide" />

        </MudPaper>

        @if (SlideDeck.Slides != null) {
            @foreach (var slide in SlideDeck.Slides) {
                <MudContainer Class="pa-2 mx-2">
                    <Learning.Client.Components.EditSlide Slide="slide" Videos="Videos" Images="Images" OnDelete="DeleteSlide"></Learning.Client.Components.EditSlide>
                </MudContainer>

            }
        }
    <MudPaper Elevation="3" Class="pa-2 mx-2">
        <MudSelect T="string" Label="Access Level" Value="@SlideDeck.AccessLevel.ToString()" ValueChanged="SelectedSlideDeckAccessLevel">
            <MudSelectItem Value="@("All")" />
            <MudSelectItem Value="@("Premium")" />
            <MudSelectItem Value="@("Free")" />
        </MudSelect>
        <MudSwitch @bind-Checked="@Label_Switch2" Label="Is published" Color="Color.Primary" />
        <MudSwitch @bind-Checked="@Label_Switch3" Label="Is deleted" Color="Color.Primary" />
        <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Save" OnClick="(async () => await SaveClicked())"></MudIconButton>
    </MudPaper>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public SlideDeck SlideDeck { get; set; }
    [Parameter]
    public List<Media> Images { get; set; }
    //[Parameter]
    //public EventCallback<SlideDeck> OnSave { get; set; } = DefaultOnSave;
    [Parameter]
    public List<Media> Videos { get; set; }

    public bool Label_Switch2 {
        get {
            return SlideDeck.IsPublished;
        }
        set {
            if (value) {
                SlideDeck.Published = DateTime.UtcNow;
            } else {
                SlideDeck.Published = DateTime.MinValue;
            }
        }
    }
    public bool Label_Switch3 {
        get {
            return SlideDeck.IsDeleted;
        }
        set {
            SlideDeck.IsDeleted = value;
        }
    }
    void SelectedSlideDeckAccessLevel(string value) {
        SlideDeck.AccessLevel = (Enums.AccessLevel)Enum.Parse(typeof(Enums.AccessLevel), value);
        //Entry.SlideDeckId = Entry.SlideDeck.Id;

    }

    async Task SaveClicked() {
        var response = await SlideDeckService.Save(SlideDeck);
        if (response.Success) {
            Snackbar.Add($"Saved", Severity.Success);
        } else {
            Snackbar.Add($"Could not save. Error: {response.Message}", Severity.Error);
        }
    }

    public void AddSlide(MouseEventArgs e) {
        SlideDeck.Slides.Add(new Slide());
    }
    void DeleteSlide(Slide slide) {
        foreach (var s in SlideDeck.Slides) {
            Console.WriteLine(slide == s);
        }
        SlideDeck.Slides.Remove(slide);
    }
    private async Task SetCoverImage(InputFileChangeEventArgs e) {
        var maxAllowedFiles = 1;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles)) {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            //await OnSubmit(imageFile);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            SlideDeck.CoverImage = imageDataUrl;
        }
    }
}
