@using Learning.Shared.DbModels

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            <MudText Typo="Typo.h6">SlideDeckProgram</MudText>
            <MudTextField @bind-Value="SlideDeckProgram.Title" Label="Title" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="SlideDeckProgram.Description" Label="Description" Variant="Variant.Text" Lines="5"></MudTextField>
            @if (!string.IsNullOrWhiteSpace(SlideDeckProgram.CoverImage)) {
                <div>
                    <img src="@SlideDeckProgram.CoverImage" class="width:100%;" />

                </div>
            }
            <InputFile id="fileInput" OnChange="SetCoverImage" hidden multiple />
            <MudFab HtmlTag="label"
                    Color="Color.Secondary"
                    Icon="@Filled.Image"
                    Label="Load Cover Image"
                    for="fileInput" />

            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Add" Size="Size.Small" OnClick="AddEntry" />
        </MudPaper>
        @if (SlideDeckProgram.Entries != null) {
            @foreach (var entry in SlideDeckProgram.Entries) {
                <MudContainer Class="pa-2 mx-2">
                    <Learning.Client.Components.EditSlideDeckProgramEntry Entry="entry" AvailableSlideDecks="AvailableSlideDecks" OnDelete="DeleteEntry"></Learning.Client.Components.EditSlideDeckProgramEntry>
                </MudContainer>

            }
        }
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            <MudIconButton Icon="@Icons.Material.Save" OnClick="(() => OnSave.InvokeAsync(SlideDeckProgram))"></MudIconButton>
        </MudPaper>
    </MudItem>
    <MudItem>

    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public SlideDeckProgram SlideDeckProgram { get; set; }

    [Parameter]
    public EventCallback<SlideDeckProgram> OnSave { get; set; }
    [Parameter]
    public List<SlideDeck> AvailableSlideDecks { get; set; }

    public void AddEntry(MouseEventArgs e) {
        SlideDeckProgram.Entries.Add(new SlideDeckProgramEntry());
    }
    void DeleteEntry(SlideDeckProgramEntry entry) {
        foreach (var s in SlideDeckProgram.Entries) {
            Console.WriteLine(entry == s);
        }
        SlideDeckProgram.Entries.Remove(entry);
    }
    private async Task SetCoverImage(InputFileChangeEventArgs e) {
        var maxAllowedFiles = 1;
        var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles)) {
            var resizedImageFile = await imageFile.RequestImageFileAsync(format,
                100, 100);
            //await OnSubmit(imageFile);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            SlideDeckProgram.CoverImage = imageDataUrl;
        }
    }
}
