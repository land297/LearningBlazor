@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Learning.Client.Services.IAuthService Auth
@inject ISnackbar Snackbar

<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p>@_authMessage</p>

@if (_claims.Count() > 0) {
    <ul>
        @foreach (var claim in _claims) {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
    
}
<MudButton OnClick="LoginUser">Login a@a.com</MudButton>
<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <p>You can only see this content if you're authorized.</p>

    </Authorized>
    <NotAuthorized>
        <h1>Authentication Failure!</h1>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData() {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated) {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        } else {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    async Task LoginUser() {
        var login = new Learning.Shared.DataTransferModel.Login()
        {
            Email = "a@a.com",
            Password = "aaa"
        };
        var response = await Auth.Login(login);
        if (response.Success) {
            await GetClaimsPrincipalData();
        } else {
            Snackbar.Add($"Could not login. Error: {response.Message}", Severity.Error);
        }

    }
}
