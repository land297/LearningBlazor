@using Learning.Shared.DbModels
@using System.Threading;
@inject NavigationManager NavigationManager

<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudText Typo="Typo.h6">@SlideDeckProgram.Title</MudText>
    <MudDivider Class="mb-4" />
    <div class="d-flex justify-space-between py-2 px-1 mt-6">
        <MudText Typo="Typo.body1">@SlideDeckProgram.Description</MudText>
        @if (!string.IsNullOrWhiteSpace(SlideDeckProgram.CoverImage)) {
            <div class="ma-1">
                <img src="@SlideDeckProgram.CoverImage" class="width:100%;" />
            </div>
        }
    </div>


    <MudDivider Class="mb-4" />


    @if (!_showingDetailedSlideDeckEntry) {
        <MudText Typo="Typo.h6">@entry.SlideDeck.Title</MudText>
        @if (!string.IsNullOrWhiteSpace(entry.SlideDeck.CoverImage)) {
            <div>
                <img src="@entry.SlideDeck.CoverImage" class="width:100%;" />

            </div>
        }
        <MudText Typo="Typo.body1">@entry.SlideDeck.Description</MudText>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ToggleDetailedSlideDeckEntry())">Learn More</MudButton>

    } else {
        <Learning.Client.Components.SlideDeckView SlideDeck="entry.SlideDeck"></Learning.Client.Components.SlideDeckView>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ToggleDetailedSlideDeckEntry())">Learn Less</MudButton>
    }

    <MudDivider Class="mb-4" />
    @if (entry != null) {
        <div class=d-flex justify-center py-2 px-1 mt-6>

            <MudToggleIconButton Toggled="@IsPlaying"
                                 Icon="@Icons.Material.Filled.PlayArrow" Color="@Color.Primary"
                                 ToggledIcon="@Icons.Material.Filled.Pause" ToggledColor="@Color.Secondary"
                                 ToggledChanged="(toggleValue) => IncrementSwitchedOn(toggleValue)"
                                 Size="Size.Large"
                                 ToggledSize="Size.Large" />
            <MudIcon Icon="@Icons.Material.Filled.Timer" Size="Size.Large" />
            <MudText Typo="Typo.body1">
                @TimeLeft / @entry.Duration
            </MudText>

            <MudIcon Icon="@Icons.Material.Filled.FormatListNumbered" Size="Size.Large" />
            <MudText Typo="Typo.body1">
                @entryIndex / @SlideDeckProgram.Entries.Count
            </MudText>
        </div>



    }
</MudPaper>






@code {
    [Parameter]
    public SlideDeckProgram SlideDeckProgram { get; set; }
    [Parameter]
    public EventCallback<SlideDeckProgram> OnCompleted { get; set; }

    SlideDeckProgramEntry entry;
    public bool IsPlaying { get; private set; }
    public bool HaveCompleted { get; private set; }

    int TimeLeft { get { return (entry == null) ? 0 : entry.Duration - Count; } }
    int Count;
    int entryIndex;

    Timer timer;

    IEnumerator<SlideDeckProgramEntry> entries;

    public bool _isOpen;

    public void ToggleOpen() {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }

    private bool _showingDetailedSlideDeckEntry = false;

    private void ToggleDetailedSlideDeckEntry() {
        _showingDetailedSlideDeckEntry = !_showingDetailedSlideDeckEntry;
    }

    protected override async Task OnInitializedAsync() {
        if (SlideDeckProgram != null && SlideDeckProgram.Entries != null) {
            entries = SlideDeckProgram.Entries.GetEnumerator();
            entries.MoveNext();
            entry = entries.Current;
            entryIndex++;
            Count = entry.Duration;

        }
        await Task.Delay(0);
    }
    public void IncrementSwitchedOn(bool toggleValue) {
        // You can do things before assignment
        // ...

        // Assignment of one-way bound parameter
        IsPlaying = toggleValue;

        // And after assignment has been made
        // ...

        if (IsPlaying && timer == null) {
            StartCountdown();
        }

    }
    void StartCountdown() {
        timer = new Timer(new TimerCallback(_ => {
            if (!IsPlaying) { return; }

            if (Count <= 0) {

                if (entries.MoveNext()) {
                    entry = entries.Current;
                    entryIndex++;
                    Count = entry.Duration;
                } else if (!HaveCompleted) {
                    Task.Run(() => OnCompleted.InvokeAsync(SlideDeckProgram));
                    HaveCompleted = true;
                    timer.Dispose();
                }
            } else {
                Count--;
            }

            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            this.StateHasChanged();
        }), null, 1000, 1000);


    }
}
