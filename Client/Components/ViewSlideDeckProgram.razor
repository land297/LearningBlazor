@using Learning.Shared.DbModels
@using System.Threading;

<MudGrid>
    <MudItem xs="12">
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            <MudText Typo="Typo.h6">@SlideDeckProgram.Title</MudText>
            <MudText Typo="Typo.body1">@SlideDeckProgram.Description</MudText>
            @if (!string.IsNullOrWhiteSpace(SlideDeckProgram.CoverImage)) {
                <div>
                    <img src="@SlideDeckProgram.CoverImage" class="width:100%;" />

                </div>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        @if (entry != null) {
        <MudPaper Elevation="3" Class="pa-2 mx-2">
                <Learning.Client.Components.SlideDeckView SlideDeck="entry.SlideDeck"></Learning.Client.Components.SlideDeckView>
        </MudPaper>
                }
        </MudItem>
    <MudItem xs="12">
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            @if (entry != null) {
                <MudText Typo="Typo.body1">
                    Entry: @entry.SlideDeck.Title
                </MudText>
                <MudText Typo="Typo.body1">
                    Duration: @TimeLeft / @entry.Duration
                </MudText>
                <MudText Typo="Typo.body1">
                    At entry of total: @entryIndex / @SlideDeckProgram.Entries.Count
                </MudText>

                <br />
                <br />
                <br />
                <MudToggleIconButton Toggled="@IsPlaying"
                                     Icon="@Icons.Material.PlayArrow" Color="@Color.Primary"
                                     ToggledIcon="@Icons.Material.Pause" ToggledColor="@Color.Secondary"
                                     ToggledChanged="(toggleValue) => IncrementSwitchedOn(toggleValue)"
                                     Size="Size.Large"
                                     ToggledSize="Size.Large" />
            }

        </MudPaper>

    </MudItem>


</MudGrid>

@code {
    [Parameter]
    public SlideDeckProgram SlideDeckProgram { get; set; }
    [Parameter]
    public EventCallback<SlideDeckProgram> OnCompleted { get; set; }

    SlideDeckProgramEntry entry;
    public bool IsPlaying { get; private set; }
    public bool HaveCompleted { get; private set; }

    int TimeLeft { get { return (entry == null) ? 0 : entry.Duration - Count; } }
    int Count;
    int entryIndex;

    Timer timer;

    IEnumerator<SlideDeckProgramEntry> entries;

    protected override async Task OnInitializedAsync() {
        if (SlideDeckProgram.Entries != null) {
            entries = SlideDeckProgram.Entries.GetEnumerator();
            entries.MoveNext();
            entry = entries.Current;
            entryIndex++;
            Count = entry.Duration;

        }
        await Task.Delay(0);
    }
    public void IncrementSwitchedOn(bool toggleValue) {
        // You can do things before assignment
        // ...

        // Assignment of one-way bound parameter
        IsPlaying = toggleValue;

        // And after assignment has been made
        // ...

        if (IsPlaying && timer == null) {
            StartCountdown();
        }

    }
    void StartCountdown() {
        timer = new Timer(new TimerCallback(_ => {
            if (!IsPlaying) { return; }

            if (Count <= 0) {

                if (entries.MoveNext()) {
                    entry = entries.Current;
                    entryIndex++;
                    Count = entry.Duration;
                } else if (!HaveCompleted) {
                    Task.Run(() => OnCompleted.InvokeAsync(SlideDeckProgram));
                    HaveCompleted = true;
                    timer.Dispose();
                }
            } else {
                Count--;
            }

            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            this.StateHasChanged();
        }), null, 1000, 1000);


    }
}
