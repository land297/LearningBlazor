@page "/addSlideDeck"
@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<Learning.Client.Components.EditSlideDeck SlideDeck="SlideDeck" OnSave="SaveSlideDeck" Videos="Videos"></Learning.Client.Components.EditSlideDeck>

@code {
    //TODO: refactor with editSlideDeckPage 
    private SlideDeck SlideDeck = new SlideDeck();
    private List<Media> Videos;

    protected override async Task OnInitializedAsync() {
        var r = await VideoService.GetVideos();
        if (r.Success) {
            Videos = r.Data;
        } else {
            //dispaly toast
        }

        await Task.Delay(100);
    }



    async Task SaveSlideDeck() {
        var response = await SlideDeckService.Save(SlideDeck);
        if (response.Success) {
            Snackbar.Add($"Saved", Severity.Success);
        } else {
            Snackbar.Add($"Could not save. Error: {response.Message}", Severity.Error);
        }
    }
}
