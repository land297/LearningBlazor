@page "/addSlideDeck"
@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject IJSRuntime JSRuntime

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Elevation="3" Class="pa-2 mx-2">
            <MudText Typo="Typo.h6">SlideDeck</MudText>
            <MudTextField @bind-Value="SlideDeck.Title" Label="Title" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="SlideDeck.Description" Label="Description" Variant="Variant.Text" Lines="5"></MudTextField>
            <MudFab Color="Color.Secondary" Icon="@Icons.Material.Add" Size="Size.Small" OnClick="AddSlide" />
        </MudPaper>
        @if (SlideDeck.Slides != null) {
            @foreach (var slide in SlideDeck.Slides) {
            <MudContainer Class="pa-2 mx-2">
                <Learning.Client.Components.EditSlide Slide="slide" Videos="Videos"></Learning.Client.Components.EditSlide>
            </MudContainer>
                
            }
        }

            </MudItem>
</MudGrid>

@code {
    private SlideDeck SlideDeck = new SlideDeck();

    private List<Media> Videos;




    protected override async Task OnInitializedAsync() {
        var r = await VideoService.GetVideos();
        if (r.Success) {
            Videos = r.Data;
        } else {
            //dispaly toast
        }

        await Task.Delay(100);
    }
    public void AddSlide(MouseEventArgs e) {
        SlideDeck.Slides.Add(new Slide());
    }
    public async void Save() {
        //await ContentService.SaveExercise(Exercise);
    }


}
