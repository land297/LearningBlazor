@page "/addUserAvatar"
@page "/addUserAvatar/{id:int}"
@using Learning.Shared.DbModels

@inject Learning.Client.Services.IUserAvatarService UserAvatars
@inject Learning.Client.Services.IUserAvatarLocalService UserAvatarLocal
@inject ISnackbar Snackbar

<Learning.Client.Components.UserAvatarEdit UserAvatar="UserAvatar" OnSave="SaveUserAvatar" />

@if (CurrentUserAvatars.Count > 0) {
    foreach (var item in CurrentUserAvatars) {
        <MudButton Typo="Typo.body1" OnClick="(async () => await SetAvatarActive(item.Name))">Set @item.Name active</MudButton>

        <div>
            <img src="@item.CoverImage" class="width:100%;" />

        </div>
        <MudButton Typo="Typo.body1" OnClick="(async () => await DeleteAvatar(item.Name))">Delete @item.Name</MudButton>
    }
}



@code {
    [Parameter]
    public int Id { get; set; }

    UserAvatar UserAvatar = new UserAvatar();
    List<UserAvatar> CurrentUserAvatars = new List<UserAvatar>();

    protected override async Task OnInitializedAsync() {
        var response = await UserAvatars.GetAll();
        if (response.Success) {
            CurrentUserAvatars = response.Data;
        } else {
            Snackbar.Add($"Could not get stuff from server. Error: {response.Message}", Severity.Error);
        }

        if (Id != default(int)) {
            var response2 = await UserAvatars.Get(Id);
            if (response2.Success) {
                UserAvatar = response2.Data;
            } else {
                Snackbar.Add($"Could not get stuff from server. Error: {response.Message}", Severity.Error);
            }
        }

    }
    async Task SetAvatarActive(string name) {
        await UserAvatarLocal.Set(CurrentUserAvatars.First(x => x.Name == name));
    }
    async Task DeleteAvatar(string name) {
        await UserAvatarLocal.Delete(CurrentUserAvatars.First(x => x.Name == name));
        var response = await UserAvatars.GetAll();
        if (response.Success) {
            CurrentUserAvatars = response.Data;
        } else {
            Snackbar.Add($"Could not get stuff from server. Error: {response.Message}", Severity.Error);
        }
    }
    async Task SaveUserAvatar() {
        var response = await UserAvatars.Save(UserAvatar);
        if (response.Success) {
            Snackbar.Add($"Saved", Severity.Success);
            CurrentUserAvatars.Add(response.Data);
        } else {
            Snackbar.Add($"Could not save. Error: {response.Message}", Severity.Error);
        }
    }
}
