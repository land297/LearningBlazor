@page "/admin/addSlideDeckProgram"
@using Learning.Shared.DbModels

@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject Learning.Client.Services.ISlideDeckProgramService SlideDeckProgramService

@inject ISnackbar Snackbar

<Learning.Client.Components.EditSlideDeckProgram SlideDeckProgram="SlideDeckProgram" OnSave="SaveSlideDeckProgram" AvailableSlideDecks="SlideDecksPublished"/>



@code {
    public SlideDeckProgram SlideDeckProgram { get; set; }
    public SlideDeckProgramEntry SlideDeckProgramEntry { get; set; }
    List<SlideDeck> SlideDecksPublished;
    List<SlideDeck> SlideDecksAll;

    protected override async Task OnInitializedAsync() {
        SlideDeckProgram = new SlideDeckProgram();
        SlideDeckProgramEntry = new SlideDeckProgramEntry();

        var r = await SlideDeckService.GetPublished();
        if (r.Success) {
            SlideDecksPublished = r.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r.Message}", Severity.Error);
        }

        r = await SlideDeckService.GetAsContentCreator();
        if (r.Success) {
            SlideDecksAll = r.Data;
        } else {
            Snackbar.Add($"Could not get as content creator. Error: {r.Message}", Severity.Error);
        }
    }
    async Task SaveSlideDeckProgram() {
        var response = await SlideDeckProgramService.Save(SlideDeckProgram);
        if (response.Success) {
            Snackbar.Add($"Saved", Severity.Success);
        } else {
            Snackbar.Add($"Could not save. Error: {response.Message}", Severity.Error);
        }
    }

}
