@page "/admin/adminListAllSlideDecksPage"
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Learning.Shared.DbModels


<AuthorizeView Roles="Admin,ContentCreator">
    <Authorized>
        @if (SlideDecksAll != null) {
            <MudTable Items="@SlideDecksAll" Hover="true" Breakpoint="Breakpoint.Sm">

                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Page count</MudTh>
                    <MudTh>AccessLevel</MudTh>
                </HeaderContent>
                <RowTemplate Context="deck">
                    <MudTd>@deck.Title</MudTd>
                    <MudTd>@deck.Description</MudTd>
                    <MudTd>@deck.Slides.Count</MudTd>
                    <MudTd>@deck.AccessLevel</MudTd>
                    <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"viewSlideDeck/{deck.Id}"))">View</MudButton></MudTd>
                    <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"admin/editSlideDeck/{deck.Id}"))">Edit</MudButton></MudTd>

                </RowTemplate>
            </MudTable>
        }
        <MudDivider Class="mb-8" />
    </Authorized>
</AuthorizeView>

@code {
            List<SlideDeck> SlideDecksPublished;
            List<SlideDeck> SlideDecksAll;

    protected override async Task OnInitializedAsync() {
            var r = await SlideDeckService.GetAsContentCreator();
            if (r.Success) {
                SlideDecksAll = r.Data;
            } else {
                Snackbar.Add($"Could not get as content creator. Error: {r.Message}", Severity.Error);
            }
        }
        }
