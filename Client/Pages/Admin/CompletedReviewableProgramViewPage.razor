@page "/admin/CompletedReviewableProgramViewPage/{CompletedProgramReviewableEntry:int}"
@using Learning.Shared.DbModels
@using Syncfusion.Blazor.RichTextEditor

@inject Learning.Client.Services.IUserAvatarService UserAvatars
@inject Learning.Client.Services.ICompletedSlideDeckProgramService CompletedPrograms
@inject Learning.Client.Services.ICompletedReviewableProgramServices completedReviewablePrograms

@inject ISnackbar Snackbar

<h3>CompletedReviewableProgramViewPage</h3>
@if (!loading) {
<MudGrid>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex flex-column mud-width-full py-8">
            <MudText Typo="Typo.body2">@unreviewed.CompletedSlideDeckProgram.Comment</MudText>
            <br />
            @foreach (var item in unreviewed.Content) {
                <MudText Typo="Typo.body1">@item.Name</MudText>
                if (item.Mime != null && item.Mime.Contains("video")) {
                    <BlazoredVideo @ref="MyBlazorVideo" class="w-100 m-2"
                                    style="max-width:400px;"
                                    controls="controls">
                        <source src="@item.Uri" type="video/mp4" />
                    </BlazoredVideo>
                } else if (item.Mime != null && item.Mime.Contains("image")) {
                    <div>
                        <img src="@item.Uri" class="width:100%;" />
                    </div>
                } else {
                    <MudText Typo="Typo.body1">Nothing...</MudText>
                }
            }
            <br />

        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudPaper Class="d-flex flex-column mud-width-full py-8">
            <SfRichTextEditor @bind-Value="@unreviewed.ReviewedComment">
                <RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />
            </SfRichTextEditor>
            <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@(async () => await Save())"></MudIconButton>
        </MudPaper>
    </MudItem>
</MudGrid>
    


}
@code {
    //[Parameter]
    //public int CompletedSlideDeckProgramId { get; set; }
    //[Parameter]
    //public int UserAvatarId { get; set; }
    [Parameter]
    public int CompletedProgramReviewableEntry { get; set; }

    CompletedProgramReviewable unreviewed;
    bool loading = true;
    BlazoredVideo MyBlazorVideo;

    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },

        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
    };

    protected override async Task OnInitializedAsync() {
        var r = await completedReviewablePrograms.GetUnreviewd(CompletedProgramReviewableEntry);
        if (r.Success) {
            unreviewed = r.Data;
        } else {
            Snackbar.Add($"Could not get CompletedProgramReviewable. Error: {r.Message}", Severity.Error);
        }

        if (unreviewed == null) { return; }
        //var ur = await UserAvatars.Get(UserAvatarId);
        //if (ur.Success) {
        //    unreviewed.UserAvatar = ur.Data;
        //} else {
        //    Snackbar.Add($"Could not get userAvatar. Error: {r.Message}", Severity.Error);
        //}

        var cr = await CompletedPrograms.Get(unreviewed.CompletedSlideDeckProgramId);
        if (cr.Success) {
            unreviewed.CompletedSlideDeckProgram = cr.Data;
            unreviewed.UserAvatar = cr.Data.UserAvatar;
        } else {
            Snackbar.Add($"Could not get userAvatar. Error: {r.Message}", Severity.Error);
        }
        loading = false;
    }

    private async Task Save() {
        unreviewed.IsReviewed = true;
        var r = await completedReviewablePrograms.Upload(unreviewed);
        if (r.Success) {
            Snackbar.Add($"Saved", Severity.Success);
        } else {
            Snackbar.Add($"Could not get CompletedProgramReviewable. Error: {r.Message}", Severity.Error);
        }
    }
}
