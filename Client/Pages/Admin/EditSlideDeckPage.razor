@page "/admin/editSlideDeck/{id:int}"
@page "/admin/editSlideDeck/{slug}"

@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

@if (!hasLoaded) {
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
} else {
    <Learning.Client.Components.EditSlideDeck SlideDeck="SlideDeck"  Videos="Videos" Images="Images"></Learning.Client.Components.EditSlideDeck>

    
}
@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Slug { get; set; }

    private SlideDeck SlideDeck = new SlideDeck();
    private List<Media> Videos;
    private List<Media> Images;

    private bool hasLoaded = false;
    protected override async Task OnInitializedAsync() {
        var r = await VideoService.GetVideos();
        if (r.Success) {
            Videos = r.Data;
        } else {
            Snackbar.Add($"Could not load video source. Error: {r.Message}", Severity.Error);
        }

        r = await VideoService.GetImages();
        if (r.Success) {
            Images = r.Data;
        } else {
            Snackbar.Add($"Could not load Images source. Error: {r.Message}", Severity.Error);
        }
       

        if (Id != default(int)) {
            var sr = await SlideDeckService.Get(Id);
            if (sr.Success) {
                SlideDeck = sr.Data;
            } else {
                Snackbar.Add($"Could not load slideDeck source. Error: {sr.Message}", Severity.Error);
            }
        } else if (!string.IsNullOrWhiteSpace(Slug)) {
            var sr = await SlideDeckService.Get(Slug);
            if (sr.Success) {
                SlideDeck = sr.Data;
            } else {
                Snackbar.Add($"Could not load slideDeck source. Error: {sr.Message}", Severity.Error);
            }
        }
        hasLoaded = true;
    }

    //OnSave="SaveSlideDeck"
    //async Task SaveSlideDeck() {
    //    var response = await SlideDeckService.Save(SlideDeck);
    //    if (response.Success) {
    //        Snackbar.Add($"Saved", Severity.Success);
    //    } else {
    //        Snackbar.Add($"Could not save. Error: {response.Message}", Severity.Error);
    //    }
    //}
}