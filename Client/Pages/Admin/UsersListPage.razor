@page "/admin/usersList"
<h3>UsersListPage</h3>
@inject Learning.Client.Services.IUserService UsersService
@inject Learning.Client.Services.ISlideDeckProgramService SlideDeckProgramService
@inject Learning.Client.Services.IUserAccessSlideDeckProgramService UserAccessSlideDeckProgramService
@inject Learning.Client.Services.IUserAvatarService UserAvatars
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Learning.Shared.DbModels

@if (Users != null) {
    <MudTable Items="@Users" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Email</MudTh>
            <MudTh>Avatars</MudTh>
            <MudTh>AccessLevel</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>
                <MudTable Items="@context.UserAvatars" Class="green lighten-3">
                    <HeaderContent>
                        <MudTh>UserAvatar Id</MudTh>
                        <MudTh>UserAvatar Name</MudTh>
                        <MudTh>Program Access</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="uaContext">
                        <MudTd>@uaContext.Id</MudTd>
                        <MudTd>@uaContext.Name</MudTd>
                        <MudTd><MudButton OnClick="@(() => ShowAddProgramsForUserAvatar(uaContext.Id,context.Id))">Add program</MudButton></MudTd>
                        <MudTd Class="blue lighten-3">
                            <MudTable Items="@uaContext.PersonalProgramAccess">
                                <HeaderContent>
                                    <MudTh>Program Id</MudTh>
                                    <MudTh>Program Name</MudTh>
                                    <MudTh>Comments</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="ppaContext">
                                    <MudTd>@ppaContext.Id</MudTd>
                                    <MudTd>@ppaContext.SlideDeckProgram.Title</MudTd>
                                    <MudTd>@ppaContext.Comments</MudTd>
                                    <MudTd><MudButton OnClick="@(() => RemoveProgramAccessFromUserAvatar(ppaContext.Id, uaContext.Id, context.Id))">X</MudButton></MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudTd>
        

        </RowTemplate>
    </MudTable>

    @*<MudSelect class="ma-10" T="string" Label="SlideDecksPublished" ValueChanged="SelectedSlideDeck">
        @if (SlideDeckPrograms != null) {
            foreach (var slideDeck in SlideDeckPrograms) {
                <MudSelectItem Value="@(slideDeck.Title)" />
            }
        }
    </MudSelect>*@
}
<MudOverlay Visible="isVisible" DarkBackground="true">
    @if (addProgramAccessToAvatarIsVisible) {
        <div style="width: 400px; height: 300px;">
            <MudPaper class="ma-10 pa-4">
                <MudContainer MaxWidth="MaxWidth.Small">
                    <MudText Typo="Typo.body2">Add program</MudText>

                    <MudSelect class="ma-10 pa-4" T="string" Label="SlideDecksPublished" ValueChanged="SelectedSlideDeck">
                        @if (SlideDeckPrograms != null) {
                            foreach (var slideDeck in SlideDeckPrograms) {
                                <MudSelectItem Value="@(slideDeck.Title)" />
                            }
                        }
                    </MudSelect>
                    <MudTextField @bind-Value="AcessComment" Label="Description" Variant="Variant.Text" Lines="5"></MudTextField>
                    <MudButton OnClick="@(() => SaveProgramToUserAvatar())">Save</MudButton>
                    <MudButton OnClick="@(() => CloseOverlay())">Close</MudButton>
                </MudContainer>
            </MudPaper>
        </div>
    } else {
        <MudPaper>
            <MudText Typo="Typo.body2">@Name</MudText>
            <MudTable Items="@OverlayUser.UserAvatars" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Assigned Programs</MudTh>
                    <MudTh>AccessLevel</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.Name</MudTd>

                    <MudTd>
                        @if (UserAccessList != null) {
                            <MudSelect T="string">
                                @foreach (var slideDeck in UserAccessList) {
                                    <MudSelectItem Value="@(slideDeck.SlideDeckProgram.Title)" />
                                    }
                            </MudSelect>
                            }
                    </MudTd>
                    <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"editSlideDeck/{context.Id}"))">Edit</MudButton></MudTd>

                </RowTemplate>
            </MudTable>
            <MudSelect T="string" Label="SlideDecksPublished" ValueChanged="SelectedSlideDeck">
                @if (SlideDeckPrograms != null) {
                    foreach (var slideDeck in SlideDeckPrograms) {
                        <MudSelectItem Value="@(slideDeck.Title)" />
                    }
                }
            </MudSelect>
            <MudButton OnClick="@(() => OpenOverlay(""))">** Close **></MudButton>
        </MudPaper>
    }
   
</MudOverlay>
@code {
    bool isVisible = false;
    bool addProgramAccessToAvatarIsVisible = false;

    string Name;

    List<User> Users;
    List<SlideDeckProgram> SlideDeckPrograms;
    User OverlayUser;
    List<UserAccessSlideDeckProgram> UserAccessList;


    UserAvatar UserAvatar;
    SlideDeckProgram SelectedSlideDeckProgram;
    String AcessComment;

    protected override async Task OnInitializedAsync() {
        var r = await UsersService.GetAll();
        if (r.Success) {
            Users = r.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r.Message}", Severity.Error);
        }

        if (Users == null) {
            Snackbar.Add($"No users found", Severity.Error);
            return;
        }


        var r2 = await SlideDeckProgramService.GetAsContentCreator();
        if (r2.Success) {
            SlideDeckPrograms = r2.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r.Message}", Severity.Error);
        }

        foreach (var user in Users) {
            var r3 = await UserAvatars.GetAllFor(user);
            if (r3.Success) {
                Console.WriteLine("adding");
                foreach (var item in r3.Data) {
                    Console.WriteLine(item.Name);
                }
                Console.WriteLine("to user " + user.Email);
                user.UserAvatars = r3.Data;
            } else {
                Snackbar.Add($"Could not get publushed. Error: {r3.Message}", Severity.Error);
            }
        }

        foreach (var user in Users) {
            foreach (var userAvatar in user.UserAvatars) {
                var r4 = await UserAccessSlideDeckProgramService.GetViaUserAvatar(userAvatar.Id);
                if (r4.Success) {
                    Console.WriteLine("adding");
                    foreach (var item in r4.Data) {
                        Console.WriteLine(item.SlideDeckProgram.Title);
                    }
                    Console.WriteLine("to user " + user.Email);
                    userAvatar.PersonalProgramAccess = r4.Data;
                } else {
                    Snackbar.Add($"Could not get publushed. Error: {r4.Message}", Severity.Error);
                }

            }
        }





    }

    public void ShowAddProgramsForUserAvatar(int userAvatarId, int userId) {
        OverlayUser = Users.First(x => x.Id == userId);
        UserAvatar = OverlayUser.UserAvatars.First(x => x.Id == userAvatarId);
        isVisible = true;
        addProgramAccessToAvatarIsVisible = true;
    }

    public async Task SaveProgramToUserAvatar() {
        if (SelectedSlideDeckProgram != null) {
            //TODO: chance to ID
            var userAcess = new UserAccessSlideDeckProgram()
            {
                SlideDeckProgramId = SelectedSlideDeckProgram.Id,
                UserAvatarId = UserAvatar.Id,
                UserId = OverlayUser.Id,
                Comments = AcessComment
            };

            var result = await UserAccessSlideDeckProgramService.PostToUserAvatar(userAcess);
            if (result.Success) {
                //TODO. solve somehow
                UserAvatar.PersonalProgramAccess.Add(result.Data);
            } else {
                Snackbar.Add($"Could not get save to user. Error: {result.Message}", Severity.Error);
            }
            isVisible = false;
            addProgramAccessToAvatarIsVisible = false;

        }


    }
    public async void CloseOverlay() {
        isVisible = !isVisible;
    }

    public async void OpenOverlay(string name) {
        OverlayUser = Users.First(x => x.Email == name);
        var r3 = await UserAccessSlideDeckProgramService.GetViaUser(OverlayUser.Id);
        if (r3.Success) {
            UserAccessList = r3.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r3.Message}", Severity.Error);
        }

        Name = name;
        isVisible = !isVisible;

        await Task.Delay(0);
    }

    public void SelectedSlideDeck(string value) {
        SelectedSlideDeckProgram = SlideDeckPrograms.First(x => x.Title == value);
        //Entry.SlideDeckId = Entry.SlideDeck.Id;

    }

    public async Task RemoveProgramAccessFromUserAvatar(int programId, int userAvatarId, int userId) {
        var r = await UserAccessSlideDeckProgramService.DeleteAccessWithId(programId);
        if (r.Success) {
            //TODO : untested
            var avatarprograms = Users.First(x => x.Id == userId).UserAvatars.First(x => x.Id == userAvatarId).PersonalProgramAccess;
            var program = avatarprograms.First(x => x.Id == programId);
            avatarprograms.Remove(program);
            //StateHasChanged();
        } else {
            Snackbar.Add($"Could not get delete. Error: {r.Message}", Severity.Error);
        }
    }
}
