@page "/"

@inject Learning.Client.Services.IAuthService Auth
@inject Learning.Client.Services.IBlogService Blogs
@inject HttpClient _http
@using Learning.Client.Components
@using Learning.Shared.DbModels;
@using Syncfusion.Blazor.RichTextEditor

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-16">


    @*<InputFile id="fileInput" OnChange="SetCoverImage" hidden multiple />
        <MudFab HtmlTag="label"
                Color="Color.Secondary"
                Icon="@Icons.Material.Filled.Image"
                Label="Load Cover Image"
                for="fileInput" />*@

    @if (PublicBlogPosts != null) {
        @foreach (var item in PublicBlogPosts) {
            <MudPaper Elevation="3" Class="my-4 pa-6">
                <MudText Align="Align.Center" Typo="Typo.h1">@item.Title</MudText>
                <MudText Typo="Typo.body1">@((MarkupString)item.Description)</MudText>
                <AuthorizeView Roles="Admin, superuser">
                    <Authorized>
                        <MudButton OnClick="@(async () => await DeleteBlog(item.Id))">Delete blog</MudButton>
                    </Authorized>
                </AuthorizeView>
            </MudPaper>
        }
    }

    <AuthorizeView Roles="Admin">
        <Authorized>
            <MudTextField @bind-Value="TextValue" Label="Blog title" Variant="Variant.Outlined"></MudTextField>
            <SfRichTextEditor @bind-Value="newBlogPost">
                <RichTextEditorImageSettings SaveUrl="api/video/image/up" Path=""></RichTextEditorImageSettings>
                <RichTextEditorEvents OnImageUploadSuccess="@ImageUploadSuccess" ImageDelete="@AfterImageDeleteSuccess" />
                @*<RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />*@
            </SfRichTextEditor>

            <MudSwitch @bind-Checked="@_isNewBlogPublished" Label="Is published" Color="Color.Primary" />
            <MudButton OnClick="SaveBlog">Save blog</MudButton>
        </Authorized>
    </AuthorizeView>
</MudContainer>

@code 
{ 
    private List<BlogPost> PublicBlogPosts;
    private string newBlogPost;
    private string TextValue;
    private bool _isNewBlogPublished;

    public string[] header { get; set; }

    private void ImageUploadSuccess(ImageSuccessEventArgs args) {
        var headers = args.Response.Headers.ToString();
        header = headers.Split("name: ");
        header = header[1].Split("\r");

        // Update the modified image name to display a image in the editor.
        args.File.Name = header[0];
    }
    private void AfterImageDeleteSuccess(AfterImageDeleteEventArgs args) {
        var headers = args.Src;
    }
    //


    protected override async Task OnInitializedAsync() {
        var r = await Blogs.GetAllPublished();
        if (r.Success) {
            PublicBlogPosts = r.Data;
        } else {
            Console.WriteLine(r.Message);
        }


    }
    private async Task SaveBlog() {
        var post = new BlogPost();
        post.Title = TextValue;
        post.Description = newBlogPost;
        if(_isNewBlogPublished) {
            post.Published = DateTime.UtcNow;
        }
        await Blogs.Save(post);
    }

    private async Task DeleteBlog(int id) {
        await Blogs.Delete(id);
    }

    private async Task SetCoverImage(InputFileChangeEventArgs e) {
        var maxAllowedFiles = 1;
        //var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles)) {
            //var resizedFile = await imageFile.RequestImageFileAsync(format,
            //    100, 100);
            //await OnSubmit(imageFile);
            //var buffer = new byte[imageFile.Size];
            //await imageFile.OpenReadStream().ReadAsync(buffer);

            //var response = await _http.PostAsync("api/upload/",new StreamContent(resizedFile.OpenReadStream()));

            using (var ms = imageFile.OpenReadStream(imageFile.Size)) {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
                content.Headers.Add("ProgramId", "2");
                //content.Headers.Add("UserAvatarId", "2");

                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);

                var response = await _http.PostAsync("api/upload", content);

                Console.WriteLine(response.IsSuccessStatusCode);
                Console.WriteLine(response.StatusCode);
                Console.WriteLine("trolololol");

            }
        }
    } }
