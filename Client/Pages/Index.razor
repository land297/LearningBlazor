@page "/"

@inject Learning.Client.Services.IAuthService Auth
@inject Learning.Client.Services.IBlogService Blogs
@inject HttpClient _http
@using Learning.Client.Components
@using Learning.Shared.DbModels;
@using Syncfusion.Blazor.RichTextEditor

<MudContainer MaxWidth="MaxWidth.Medium" Class="my-16">


    @*<InputFile id="fileInput" OnChange="SetCoverImage" hidden multiple />
        <MudFab HtmlTag="label"
                Color="Color.Secondary"
                Icon="@Icons.Material.Filled.Image"
                Label="Load Cover Image"
                for="fileInput" />*@

    @if (PublicBlogPosts != null) { 
        @foreach (var item in PublicBlogPosts) {
        <MudPaper Elevation="3">
            <MudText Typo="Typo.h1">@item.Title</MudText>
            <MudText Typo="Typo.body1">@((MarkupString)item.Description)</MudText>
        </MudPaper>
        }
    }

    <MudTextField @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined"></MudTextField>
    <SfRichTextEditor @bind-Value="newBlogPost">
        @*<RichTextEditorToolbarSettings Items="@Tools" Type="ToolbarType.MultiRow" />*@
    </SfRichTextEditor>
    <MudButton OnClick="SaveBlog">Save blog</MudButton>

</MudContainer>

@code 
{ 
    private List<BlogPost> PublicBlogPosts;
    private string newBlogPost;
    private string TextValue;

    //
    private List<ToolbarItemModel> Tools = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },

        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
    };

    protected override async Task OnInitializedAsync() {
        var r = await Blogs.GetAllPublished();
        if (r.Success) {
            PublicBlogPosts = r.Data;
        } else {
            Console.WriteLine(r.Message);
        }


    }
    private async Task SaveBlog() {
        var post = new BlogPost();
        post.Title = TextValue;
        post.Description = newBlogPost;
        await Blogs.Save(post);


    }
    private async Task SetCoverImage(InputFileChangeEventArgs e) {
        var maxAllowedFiles = 1;
        //var format = "image/png";

        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles)) {
            //var resizedFile = await imageFile.RequestImageFileAsync(format,
            //    100, 100);
            //await OnSubmit(imageFile);
            //var buffer = new byte[imageFile.Size];
            //await imageFile.OpenReadStream().ReadAsync(buffer);

            //var response = await _http.PostAsync("api/upload/",new StreamContent(resizedFile.OpenReadStream()));

            using (var ms = imageFile.OpenReadStream(imageFile.Size)) {
                var content = new MultipartFormDataContent();
                content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
                content.Headers.Add("ProgramId", "2");
                //content.Headers.Add("UserAvatarId", "2");

                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);
                content.Add(new StreamContent(ms, Convert.ToInt32(imageFile.Size)), imageFile.ContentType, imageFile.Name);

                var response = await _http.PostAsync("api/upload", content);

                Console.WriteLine(response.IsSuccessStatusCode);
                Console.WriteLine(response.StatusCode);
                Console.WriteLine("trolololol");

            }
        }
    } }
