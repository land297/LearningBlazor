@page "/listAllSlideDeckProgramsPage"
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject Learning.Client.Services.ISlideDeckProgramService SlideDeckProgramService
@inject Learning.Client.Services.IAuthService Auth
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Learning.Shared.DbModels


<AuthorizeView Roles="Admin,ContentCreator">
    <Authorized>
        @if (SlideDeckProgramsAll != null) {
            <MudTable Items="@SlideDeckProgramsAll" Hover="true" Breakpoint="Breakpoint.Sm">
                <HeaderContent>
                    <MudTh>Title</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Page count</MudTh>
                    <MudTh>AccessLevel</MudTh>
                    <MudTh>Is published</MudTh>
                </HeaderContent>
                <RowTemplate Context="deck">
                    <MudTd>@deck.Title</MudTd>
                    <MudTd>@deck.Description</MudTd>
                    <MudTd>@deck.Entries.Count</MudTd>
                    <MudTd>@deck.AccessLevel</MudTd>
                    <MudTd>@deck.IsPublished</MudTd>
                    <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"viewSlideDeckProgram/{deck.Id}"))">View</MudButton></MudTd>
                    <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"editSlideDeckProgram/{deck.Id}"))">Edit</MudButton></MudTd>

                </RowTemplate>
            </MudTable>
        }
        <MudDivider Class="mb-8" />
    </Authorized>
</AuthorizeView>

@if (SlideDeckProgramsPublished != null) {

    <MudContainer MaxWidth="MaxWidth.Medium">
        @foreach (var slideDeckProgram in SlideDeckProgramsPublished) {
            <MudPaper Elevation="3" Class="pa-2 mb-4">
                <MudText Typo="Typo.h6">@slideDeckProgram.Title</MudText>
                @if (!string.IsNullOrWhiteSpace(slideDeckProgram.CoverImage)) {
                    <div>
                        <img src="@slideDeckProgram.CoverImage" class="width:100%;" />

                    </div>
                }
                <MudText Typo="Typo.body1">@slideDeckProgram.Description</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"viewSlideDeckProgram/{slideDeckProgram.Id}"))">Learn More</MudButton>
            </MudPaper>
        }
    </MudContainer>
} else {
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
        <MudDivider Class="mb-8" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
        <MudDivider Class="mb-8" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
    </MudContainer>
}
@code {
    List<SlideDeckProgram> SlideDeckProgramsPublished;
    List<SlideDeckProgram> SlideDeckProgramsAll;
    protected override async Task OnInitializedAsync() {
        var r = await SlideDeckProgramService.GetPublished();
        if (r.Success) {
            SlideDeckProgramsPublished = r.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r.Message}", Severity.Error);
        }

        if (await Auth.IsContentCreator() || await Auth.IsAdmin()) {
            r = await SlideDeckProgramService.GetAsContentCreator();
            if (r.Success) {
                SlideDeckProgramsAll = r.Data;
            } else {
                Snackbar.Add($"Could not get as content creator. Error: {r.Message}", Severity.Error);
            }
        }
    }
}