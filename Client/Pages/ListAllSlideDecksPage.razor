@page "/listAllSlideDecksPage"
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Learning.Shared.DbModels

<h3>ListAllSlideDecksPage</h3>

@if (SlideDecksAll != null) {
    <MudTable Items="@SlideDecksAll" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Page count</MudTh>
            <MudTh>AccessLevel</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Title</MudTd>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.Slides.Count</MudTd>
            <MudTd>@context.AccessLevel</MudTd>
            <MudTd><MudButton OnClick="@(() => NavigationManager.NavigateTo($"viewSlideDeck/{context.Id}"))">Button test</MudButton></MudTd>

        </RowTemplate>
    </MudTable>
}

@if (SlideDecksAll != null) {
    <MudGrid>
        @foreach (var slidedeck in SlideDecksAll) {
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="3" Class="pa-2 mx-2">
                    <MudText Typo="Typo.h6">@slidedeck.Title</MudText>
                    <MudText Typo="Typo.body1">@slidedeck.Description</MudText>
                </MudPaper>
            </MudItem>
        }

    </MudGrid>
}
@code {
    List<SlideDeck> SlideDecksPublished;
    List<SlideDeck> SlideDecksAll;
    protected override async Task OnInitializedAsync() {
        var r = await SlideDeckService.GetPublished();
        if (r.Success) {
            SlideDecksPublished = r.Data;
        } else {
            Snackbar.Add($"Could not get publushed. Error: {r.Message}", Severity.Error);
        }

        r = await SlideDeckService.GetAsContentCreator();
        if (r.Success) {
            SlideDecksAll = r.Data;
        } else {
            Snackbar.Add($"Could not get as content creator. Error: {r.Message}", Severity.Error);
        }
    }
}
