@page "/allUserAvatars"
@using Learning.Shared.DbModels

@inject Learning.Client.Services.IUserAvatarService UserAvatars
@inject Learning.Client.Services.IUserAvatarLocalService UserAvatarLocal
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

    @if (CurrentUserAvatars.Count != 0) {
        <MudContainer MaxWidth="MaxWidth.Medium">

            @foreach (var item in CurrentUserAvatars) {
                <MudPaper Elevation="3" Class="mb-6">
                    <div class="d-flex">
                        <div class="d-flex flex-column ma-2">
                            <MudText Typo="Typo.body1" Align="Align.Center">@item.Name</MudText>
                            <MudAvatar Image="@item.CoverImage" Style="height:100px; width:100px;">
                            </MudAvatar>

                        </div>
                        <MudDivider Vertical="true" FlexItem="true" Class="ma-2"/>
                        <div class="ma-2 flex-column">
                            <MudText Typo="Typo.body1">Description</MudText>
                            <MudText Typo="Typo.body2">@item.Description</MudText>
                        </div>
                    </div>
                    <div class="d-flex flex-row-reverse">
                        <MudButton Variant="Variant.Text" class="ml-4" Color="Color.Secondary" OnClick="@(async () => await DeleteAvatar(item.Name))">Delete</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(async () => await SetAvatarActive(item.Name))">Set Active</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"viewUserAvatar/{item.Id}"))">Learn More</MudButton>
                    </div>
                </MudPaper>
            }
        </MudContainer>
    }

    @code {
            List<UserAvatar> CurrentUserAvatars = new List<UserAvatar>();

        protected override async Task OnInitializedAsync() {
            var response = await UserAvatars.GetAll();
            if (response.Success) {
                CurrentUserAvatars = response.Data;
            } else {
                Snackbar.Add($"Could not get stuff from server. Error: {response.Message}", Severity.Error);
            }
        }


        async Task DeleteAvatar(string name) {
            bool? result = await DialogService.ShowMessageBox(
               "Warning",
               "Deleting can not be undone!",
               yesText: "Delete!", cancelText: "Cancel");
            var state = result == null ? "Cancelled" : "Deleted!";
            if (state == "Deleted!") {

                await UserAvatarLocal.Delete(CurrentUserAvatars.First(x => x.Name == name));
                var response = await UserAvatars.GetAll();
                if (response.Success) {
                    CurrentUserAvatars = response.Data;
                } else {
                    Snackbar.Add($"Could not get stuff from server. Error: {response.Message}", Severity.Error);
                }
            }
        }
        async Task SetAvatarActive(string name) {
            await UserAvatars.SetActive(CurrentUserAvatars.First(x => x.Name == name));
            //await UserAvatarLocal.Set(CurrentUserAvatars.First(x => x.Name == name));
        }
    }
