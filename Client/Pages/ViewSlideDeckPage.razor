@page "/viewSlideDeck/{id:int}"
@page "/viewSlideDeck/{slug}"

@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject Learning.Client.Services.ISlideDeckService SlideDeckService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium">
    @if (!hasLoaded) {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
    } else {
        <Learning.Client.Components.SlideDeckView SlideDeck="SlideDeck"></Learning.Client.Components.SlideDeckView>
    }
</MudContainer>
    @code {
        [Parameter]
        public int Id { get; set; }
        [Parameter]
        public string Slug { get; set; }

        private SlideDeck SlideDeck = new SlideDeck();

        private bool hasLoaded = false;
        protected override async Task OnInitializedAsync() {
            if (Id != default(int)) {
                var sr = await SlideDeckService.Get(Id);
                if (sr.Success) {
                    SlideDeck = sr.Data;
                } else {
                    Snackbar.Add($"Could not load slideDeck source. Error: {sr.Message}", Severity.Error);
                }
            }
            hasLoaded = true;
        }
    }
