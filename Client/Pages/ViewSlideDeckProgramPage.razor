@page "/viewSlideDeckProgram/{id:int}"
@page "/viewSlideDeckProgram/{slug}"

@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject Learning.Client.Services.ISlideDeckProgramService SlideDeckProgramService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

@if (!hasLoaded) {
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
} else if (!isCompleted) {
    <Learning.Client.Components.ViewSlideDeckProgram SlideDeckProgram="SlideDeckProgram" OnCompleted="ProgramCompleted"></Learning.Client.Components.ViewSlideDeckProgram>
} else {
    <MudText Typo="Typo.h6">Klar med @SlideDeckProgram.Title</MudText>
    <MudText Typo="Typo.h6">Bla bla bla, sätta poäng och allt annat grejande..</MudText>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Slug { get; set; }

    private SlideDeckProgram SlideDeckProgram = new SlideDeckProgram();

    private bool hasLoaded = false;
    private bool isCompleted = false;
    protected override async Task OnInitializedAsync() {
        if (Id != default(int)) {
            var sr = await SlideDeckProgramService.Get(Id);
            if (sr.Success) {
                SlideDeckProgram = sr.Data;
            } else {
                Snackbar.Add($"Could not load slideDeck source. Error: {sr.Message}", Severity.Error);
            }
        }
        hasLoaded = true;
    }

    public async Task ProgramCompleted(SlideDeckProgram progarm) {
        isCompleted = true;
        Task.Delay(0);
    }
}
