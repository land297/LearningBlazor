@page "/viewSlideDeckProgram/{DeckId:int}"
@page "/viewSlideDeckProgram/{slug}"

@using Learning.Shared.DbModels

@inject Learning.Client.Services.IVideoService VideoService
@inject Learning.Client.Services.ISlideDeckProgramService SlideDeckProgramService
@*@inject Learning.Client.Services.IUserAvatarLocalService UserAvatarLocal*@
@inject Learning.Client.Services.ICompletedSlideDeckProgramService CompletedProgram
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using BlazorState
@inherits BlazorStateComponent
@using Learning.Client.Features

@if (!hasLoaded) {
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="200px" Height="110px" />
} else if (!isCompleted) {
    <Learning.Client.Components.ViewSlideDeckProgram SlideDeckProgram="SlideDeckProgram" OnCompleted="ProgramCompleted"></Learning.Client.Components.ViewSlideDeckProgram>
} else {
<MudContainer MaxWidth="MaxWidth.Small">
    <MudText Typo="Typo.h6">@ActiveUserAvatarState.UserAvatar.Name är klar med @SlideDeckProgram.Title</MudText>
    <MudText Typo="Typo.h6">Bla bla bla, sätta poäng och allt annat grejande..</MudText>
    <MudTextField @bind-Value="CompletedDescription" Label="Description" Variant="Variant.Text" Lines="5"></MudTextField>
    <MudRating @bind-SelectedValue="selectedVal"></MudRating>
    <MudButton OnClick="Save">Save</MudButton>
    
</MudContainer>
}
        @code {
            ActiveUserAvatarState ActiveUserAvatarState => GetState<ActiveUserAvatarState>();

            [Parameter]
            public int DeckId { get; set; }
            [Parameter]
            public string Slug { get; set; }
        private SlideDeckProgram SlideDeckProgram = new SlideDeckProgram();
        private bool hasLoaded = false;
        private bool isCompleted = false;
        protected override async Task OnInitializedAsync() {
            if (DeckId != default(int)) {
                var sr = await SlideDeckProgramService.Get(DeckId);
                if (sr.Success) {
                    SlideDeckProgram = sr.Data;
                } else {
                    Snackbar.Add($"Could not load slideDeck source. Error: {sr.Message}", Severity.Error);
                }
            }
            hasLoaded = true;
        }

        string CompletedDescription;
        int selectedVal = 0;
        public async Task Save() {

            isCompleted = true;
            var completed = new CompletedSlideDeckProgram();
            completed.SlideDeckProgramId = SlideDeckProgram.Id;
            completed.UserAvatarId = ActiveUserAvatarState.UserAvatar.Id;
            completed.Comment = CompletedDescription;
            completed.CompletedOn = DateTime.UtcNow;
            completed.UserAvatarFeedback = selectedVal;

            var sr = await CompletedProgram.Save(completed);
            if (sr.Success) {
                Snackbar.Add($"Saved", Severity.Success);
                NavigationManager.NavigateTo("/");
            } else {
                Snackbar.Add($"Could not save completed program source. Error: {sr.Message}", Severity.Error);
            }

        }
        public async Task ProgramCompleted(SlideDeckProgram progarm) {
            isCompleted = true;

            await Task.Delay(0);
        }
        }
